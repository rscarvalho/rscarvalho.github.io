<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rodolfo Carvalho]]></title>
  <link href="http://rscarvalho.github.io/atom.xml" rel="self"/>
  <link href="http://rscarvalho.github.io/"/>
  <updated>2014-11-30T11:29:49-05:00</updated>
  <id>http://rscarvalho.github.io/</id>
  <author>
    <name><![CDATA[Rodolfo Carvalho]]></name>
    <email><![CDATA[rodolfo.ueg@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Taking advantage of your rails model generator]]></title>
    <link href="http://rscarvalho.github.io/blog/2014/11/30/taking-advantage-of-your-rails-model-generator/"/>
    <updated>2014-11-30T09:51:26-05:00</updated>
    <id>http://rscarvalho.github.io/blog/2014/11/30/taking-advantage-of-your-rails-model-generator</id>
    <content type="html"><![CDATA[<p>This is a quick trick I haven’t explored until now (no really, didn’t know it like 5 minute ago).</p>

<p>When you’re calling <code>rails g model</code> to generate your models, you have the option to pass in the field names inline, like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rails g model UserRole user_id:integer role_id:integer extra_permissions:text</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The example above has something interesting: you create two columns of type <code>integer</code>: <code>role_id</code> and <code>user_id</code>. What you really want to express, however, is that you want ot hook up two <em>associations</em> in your <code>UserRole</code> model: <code>belongs_to :role</code> and <code>belongs_to :user</code>. After you generate this migration, you may have to do a couple of things by hand:</p>

<ul>
  <li>add <code>add_index</code> commands on the migration to create the index on <code>role_id</code> and <code>user_id</code> <strong>before</strong> running <code>rake db:migrate</code></li>
  <li>add <code>belongs_to</code> associations in <code>app/models/user_role.rb</code></li>
</ul>

<p>Well, all of this manual typing can be just eliminated if you use this syntax instead:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ rails g model UserRole user:belongs_to role:belongs_to extra_permissions:text</span></code></pre></td></tr></table></div></figure></notextile></div>

<!--more-->

<p>That’s it! We express the model with its <strong>data relations</strong> instead of raw database columns. As you can see in the generated code, rails already included the appropriate <code>belongs_to</code> and indexes to the files, like below:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>app/models/user_role.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">UserRole</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class="line">  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class="line">  <span class="n">belongs_to</span> <span class="ss">:role</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And to the migration file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>db/migrate/20141130144340_create_user_roles.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">CreateUserRoles</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">change</span>
</span><span class="line">    <span class="n">create_table</span> <span class="ss">:user_roles</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class="line">      <span class="n">t</span><span class="o">.</span><span class="n">belongs_to</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="kp">true</span>
</span><span class="line">      <span class="n">t</span><span class="o">.</span><span class="n">belongs_to</span> <span class="ss">:role</span><span class="p">,</span> <span class="ss">index</span><span class="p">:</span> <span class="kp">true</span>
</span><span class="line">      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:extra_permissions</span>
</span><span class="line">
</span><span class="line">      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>All done in a single call to <code>rails g</code>. Hope you enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyRegex has been updated!]]></title>
    <link href="http://rscarvalho.github.io/blog/2014/06/14/pyregex-has-been-updated/"/>
    <updated>2014-06-14T19:02:00-04:00</updated>
    <id>http://rscarvalho.github.io/blog/2014/06/14/pyregex-has-been-updated</id>
    <content type="html"><![CDATA[<p>Today I have been rolled a new version of <a href="http://www.pyregex.com">PyRegex</a>, with quite a big changeset on the backend.
PyRegex users are not expected to see any changes neither in behavior nor UI, but I’d like to cover the changes here in more detail.
The basic topics are:</p>

<ul>
  <li>Flask as python webapp framework</li>
  <li>Python 3.4</li>
</ul>

<!--more-->

<h4 id="flask-as-python-webapp-framework">Flask as python webapp framework</h4>

<p>As some of you know, PyRegex started as a Google AppEngine app back in 2009. At that time, it was the only viable option given the project has no funding,
so it had to run on a free hosting provider. After the first release, I got some personal issues and wasn’t able to maintain the project for a long time.</p>

<p>In 2013 I have decided do rebuild PyRegex from scratch. It was still on Google AppEngine, but I made use of some cool stuff on the frontend:
HTML5 and <a href="http://angularjs.org">AngularJS</a>.
On the backend I have changed the strategy, focusing on a RESTful API using <a href="http://webapp-improved.appspot.com/">webapp2</a>,
which is already included by default in the Google AppEngine SDK. The result was good overall (especially on the UI side), but the final product
were a bit overcomplicated and hard to maintain.</p>

<p>Unfortunately I had to move away from Google AppEngine due to restrictions on the runtime. I ended up hosting it on Heroku <sup>
[<a href="https://github.com/rscarvalho/pyregex/issues/9">1</a>][<a href="http://heroku.com">2</a>]
</sup>. I decided to keep <code>webapp2</code> as the web framework because it also runs outside Google AppEngine.</p>

<p>But as of now, I decided to remove the last Google AppEngine reference to PyRegex, and it is now a “pure python” application.</p>

<p>Recently I have looked at the <a href="http://flask.pocoo.org">Flask webapp microframework</a>. It’s a very interesting project, very simple and flexible, which gives
power to the developer to do some really cool things.
application running on heroku.</p>

<p>PyRegex has now ported its API server to run on Flask without any drawbacks.</p>

<p>&nbsp;</p>

<h4 id="bumped-runtime-version-to-python-34">Bumped runtime version to Python 3.4</h4>

<p>Yes, I did it. PyRegex is officially running on py3k now. Some of you may say “But the majority of projects are still running on Python 2.x.
Python 2.x EOL <a href="http://legacy.python.org/dev/peps/pep-0373/">is set for 2020</a>”.</p>

<p><img src="https://i.imgflip.com/9knu7.jpg" alt="Migrate to Python 3" /></p>

<p>I have been planning to make this change for a long time, but I didn’t manage my time to do so until now.
Python 3 is up for <a href="https://www.python.org/download/releases/3.0/">more than 5 years now</a>, and it’s more than time for people and organizations to migrate.</p>

<p>And time has come to PyRegex. It’s on Python 3.4 and it’s not expected that you run into any issues testing your regular expressions, given the regex
matches didn’t change from Python 2.x to 3.x.</p>

<p>As usual, you are more than welcome to <a href="https://github.com/rscarvalho/pyregex">fork the project</a> on Github and/or <a href="https://github.com/rscarvalho/pyregex/issues">create an issue</a> if you run into any problems!</p>

]]></content>
  </entry>
  
</feed>
